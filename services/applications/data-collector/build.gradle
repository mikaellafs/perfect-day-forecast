apply plugin: 'application'

dependencies {
    implementation project(":components:data-collector")
    implementation project(":components:rabbit-support")
    implementation("com.rabbitmq:amqp-client:5.19.0")
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2'
    implementation 'com.google.code.gson:gson:2.8.8'
    implementation 'io.lettuce:lettuce-core:6.2.6.RELEASE'
}

application {
    // Define the main class for the application.
    mainClass = 'com.example.perfectdayforecast.app.AppKt'
}

tasks.withType(Copy).all {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

distTar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

distZip {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

project.ext {
    REDIS_URL = "redis://localhost:6379/0"
    RABBIT_URL = "amqp://localhost:5672"
    WEATHER_FORECAST_API_URL = "https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&daily=weathercode,temperature_2m_max,temperature_2m_min,rain_sum,snowfall_sum,precipitation_sum,precipitation_probability_max&timezone=auto&start_date={start_date}&end_date={end_date}"
    RABBIT_ANALYZER_EXCHANGE = "analyzer-ex"
    RABBIT_ANALYZER_QUEUE= "analyzer-qu"
    RABBIT_REQUESTS_EXCHANGE = "collector-ex"
    RABBIT_REQUESTS_QUEUE = "collector-qu"
}

tasks.withType(JavaExec) {
    doFirst {
        environment REDIS_URL: project.REDIS_URL
        environment RABBIT_URL: project.RABBIT_URL
        environment WEATHER_FORECAST_API_URL: project.WEATHER_FORECAST_API_URL
        environment RABBIT_ANALYZER_EXCHANGE: project.RABBIT_ANALYZER_EXCHANGE
        environment RABBIT_ANALYZER_QUEUE: project.RABBIT_ANALYZER_QUEUE
        environment RABBIT_REQUESTS_EXCHANGE: project.RABBIT_REQUESTS_EXCHANGE
        environment RABBIT_REQUESTS_QUEUE: project.RABBIT_REQUESTS_QUEUE
    }
}
